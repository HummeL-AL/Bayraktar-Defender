//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Joicy/Controllers/CameraActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraActionMap"",
    ""maps"": [
        {
            ""name"": ""View"",
            ""id"": ""82981907-4c59-4b10-8c84-94f38ef11231"",
            ""actions"": [
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""a17010f3-5974-4ada-a446-d676a345f341"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""3a7c8629-4f14-4dae-bd7a-4a79125b26c2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2ed0cb2-429b-447f-bf35-d61877bc5c79"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c672bb8-d4e8-4eb2-832b-e4247aba5209"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Modes"",
            ""id"": ""007bb72b-d409-4789-8600-87fbf31ff23b"",
            ""actions"": [
                {
                    ""name"": ""ChoosePreviousMode"",
                    ""type"": ""Button"",
                    ""id"": ""7f140527-9e88-4acb-86ef-4c64b4b5dde5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseNextMode"",
                    ""type"": ""Button"",
                    ""id"": ""68c33f2e-269c-4091-a8d3-10d0e3f433d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62a8f4e8-e338-45c1-82d1-f88cccc391de"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseNextMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09a1abb1-7120-4e38-8a18-91f64ef5604a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoosePreviousMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // View
        m_View = asset.FindActionMap("View", throwIfNotFound: true);
        m_View_LookAround = m_View.FindAction("LookAround", throwIfNotFound: true);
        m_View_Zoom = m_View.FindAction("Zoom", throwIfNotFound: true);
        // Modes
        m_Modes = asset.FindActionMap("Modes", throwIfNotFound: true);
        m_Modes_ChoosePreviousMode = m_Modes.FindAction("ChoosePreviousMode", throwIfNotFound: true);
        m_Modes_ChooseNextMode = m_Modes.FindAction("ChooseNextMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // View
    private readonly InputActionMap m_View;
    private IViewActions m_ViewActionsCallbackInterface;
    private readonly InputAction m_View_LookAround;
    private readonly InputAction m_View_Zoom;
    public struct ViewActions
    {
        private @CameraActionMap m_Wrapper;
        public ViewActions(@CameraActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookAround => m_Wrapper.m_View_LookAround;
        public InputAction @Zoom => m_Wrapper.m_View_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_View; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ViewActions set) { return set.Get(); }
        public void SetCallbacks(IViewActions instance)
        {
            if (m_Wrapper.m_ViewActionsCallbackInterface != null)
            {
                @LookAround.started -= m_Wrapper.m_ViewActionsCallbackInterface.OnLookAround;
                @LookAround.performed -= m_Wrapper.m_ViewActionsCallbackInterface.OnLookAround;
                @LookAround.canceled -= m_Wrapper.m_ViewActionsCallbackInterface.OnLookAround;
                @Zoom.started -= m_Wrapper.m_ViewActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_ViewActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_ViewActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_ViewActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LookAround.started += instance.OnLookAround;
                @LookAround.performed += instance.OnLookAround;
                @LookAround.canceled += instance.OnLookAround;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public ViewActions @View => new ViewActions(this);

    // Modes
    private readonly InputActionMap m_Modes;
    private IModesActions m_ModesActionsCallbackInterface;
    private readonly InputAction m_Modes_ChoosePreviousMode;
    private readonly InputAction m_Modes_ChooseNextMode;
    public struct ModesActions
    {
        private @CameraActionMap m_Wrapper;
        public ModesActions(@CameraActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChoosePreviousMode => m_Wrapper.m_Modes_ChoosePreviousMode;
        public InputAction @ChooseNextMode => m_Wrapper.m_Modes_ChooseNextMode;
        public InputActionMap Get() { return m_Wrapper.m_Modes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModesActions set) { return set.Get(); }
        public void SetCallbacks(IModesActions instance)
        {
            if (m_Wrapper.m_ModesActionsCallbackInterface != null)
            {
                @ChoosePreviousMode.started -= m_Wrapper.m_ModesActionsCallbackInterface.OnChoosePreviousMode;
                @ChoosePreviousMode.performed -= m_Wrapper.m_ModesActionsCallbackInterface.OnChoosePreviousMode;
                @ChoosePreviousMode.canceled -= m_Wrapper.m_ModesActionsCallbackInterface.OnChoosePreviousMode;
                @ChooseNextMode.started -= m_Wrapper.m_ModesActionsCallbackInterface.OnChooseNextMode;
                @ChooseNextMode.performed -= m_Wrapper.m_ModesActionsCallbackInterface.OnChooseNextMode;
                @ChooseNextMode.canceled -= m_Wrapper.m_ModesActionsCallbackInterface.OnChooseNextMode;
            }
            m_Wrapper.m_ModesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChoosePreviousMode.started += instance.OnChoosePreviousMode;
                @ChoosePreviousMode.performed += instance.OnChoosePreviousMode;
                @ChoosePreviousMode.canceled += instance.OnChoosePreviousMode;
                @ChooseNextMode.started += instance.OnChooseNextMode;
                @ChooseNextMode.performed += instance.OnChooseNextMode;
                @ChooseNextMode.canceled += instance.OnChooseNextMode;
            }
        }
    }
    public ModesActions @Modes => new ModesActions(this);
    public interface IViewActions
    {
        void OnLookAround(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IModesActions
    {
        void OnChoosePreviousMode(InputAction.CallbackContext context);
        void OnChooseNextMode(InputAction.CallbackContext context);
    }
}
